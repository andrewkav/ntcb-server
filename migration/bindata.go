// Code generated by go-bindata. DO NOT EDIT.
// sources:
// clickhouse/20200222183434_initial.down.sql (0)
// clickhouse/20200222183434_initial.up.sql (918B)
// clickhouse/20200222183441_addAlarming.down.sql (56B)
// clickhouse/20200222183441_addAlarming.up.sql (74B)

package migration

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20200222183434_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _20200222183434_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200222183434_initialDownSql,
		"20200222183434_initial.down.sql",
	)
}

func _20200222183434_initialDownSql() (*asset, error) {
	bytes, err := _20200222183434_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200222183434_initial.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1582385674, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __20200222183434_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x41\x6f\x9b\x40\x10\x85\xef\xf9\x15\x73\x34\x52\x52\xd5\x69\x1b\xa5\x87\x1e\x9c\x06\x47\x48\x35\xae\x60\x2b\x95\xd3\x6a\x03\xaf\x68\x94\x65\x97\x2e\x03\x4a\xfe\x7d\xe5\x90\xda\xe0\xc6\xcd\x1c\xb8\xbc\x6f\xde\x0c\xc3\xe3\x6b\x16\xaf\x54\x4c\x6a\x75\xf3\x2d\xa6\x64\x4d\xe9\x56\x51\xfc\x33\xc9\x55\x4e\x12\x4c\xf9\xc0\xae\x7e\x27\xb0\x68\x20\xe1\x89\x16\x67\x44\x44\x15\x06\x2e\xa1\xb9\xa2\x43\xad\xf9\x11\x55\x2e\x81\x5d\xbd\x58\x7e\x8a\xce\x9f\xc1\x0e\xbf\xb5\xf3\x34\xab\x1f\x89\x93\x0f\x97\xa3\x2e\xdc\xa0\x13\xd3\xb4\x13\xfd\xd6\x08\x14\x37\x18\x09\x0c\x70\xa2\x4b\x5f\x61\xee\xb0\xbc\x7a\x99\x20\x46\xfa\xee\xdf\x09\xd7\xa3\xec\xcc\xa0\x07\x63\x67\x9b\x8e\x32\x5d\x5c\xd0\xbd\xf7\x16\xc6\xd1\x7b\xf2\x81\x96\xfb\x86\xce\x08\xac\x65\x81\x2e\x7d\xef\xe4\xd8\xef\x78\xe9\xf9\xc2\xd6\x3b\x3a\xae\xb5\xf5\x46\xae\x3e\xbe\x00\x46\xfe\x0f\x18\xfb\x06\xd0\xb5\x40\xf5\x1a\xf0\xf7\xac\x15\x07\x94\xc2\xb3\x4d\x66\x80\xaf\x7c\x03\x41\x38\xe9\x00\x57\xb3\x83\x0e\x6d\xf3\xfa\xd9\xb9\x76\xbc\x1b\xa0\x27\x33\x26\x67\xfa\xd5\xc3\x6a\x8b\x61\xf7\x64\x41\xe8\x4e\xf8\x0b\x26\x9f\xfe\xd0\x6e\xca\x12\x56\xb7\xbe\xe3\xc3\x4b\x4c\xdc\xef\x83\x79\xc0\x69\xb9\xe2\x4e\x74\xef\x84\xad\xee\x10\x76\x49\x3d\x3e\x0f\xc4\xb0\x9d\x87\x66\x4c\xee\x59\xf4\x0c\xc4\xe9\x5d\x92\xc6\x94\xa1\xb5\xa6\x64\x57\x6f\x10\x6a\xa8\x00\x2c\x22\xfa\xbe\xca\x54\xa2\x92\x6d\x4a\x37\x05\x89\x2f\x8a\xa2\xd8\x6c\x16\xfb\x4c\x44\xb4\xcd\x6e\xe3\x6c\x27\x2e\xf6\xbf\xc9\xf9\x3c\x37\x11\xe5\xb1\x52\x49\x7a\x97\x13\xbb\x0a\x8f\xba\x0e\xc6\xf5\xd6\x04\x96\x27\xfa\x42\xd7\xcb\xcf\x97\x7f\x02\x00\x00\xff\xff\xcb\x29\x4a\x12\x96\x03\x00\x00")

func _20200222183434_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200222183434_initialUpSql,
		"20200222183434_initial.up.sql",
	)
}

func _20200222183434_initialUpSql() (*asset, error) {
	bytes, err := _20200222183434_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200222183434_initial.up.sql", size: 918, mode: os.FileMode(0644), modTime: time.Unix(1582385689, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x6f, 0x32, 0x71, 0xd8, 0x4c, 0x83, 0xf8, 0xc, 0xe9, 0xcb, 0x2d, 0x4f, 0xb6, 0x9, 0x11, 0xb4, 0xf4, 0x65, 0x36, 0x9c, 0x70, 0x15, 0x47, 0x60, 0xf2, 0x47, 0x98, 0x73, 0x39, 0x8, 0x58}}
	return a, nil
}

var __20200222183441_addalarmingDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x29\x4a\x4c\xce\xce\xcc\x4b\xd7\x2b\x49\xcd\x49\xcd\x4d\x2d\x29\xaa\xe4\x52\x50\x50\x50\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcc\x49\x2c\xca\xcd\xcc\x4b\xb7\x06\x04\x00\x00\xff\xff\xce\x61\xb0\xbc\x38\x00\x00\x00")

func _20200222183441_addalarmingDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200222183441_addalarmingDownSql,
		"20200222183441_addAlarming.down.sql",
	)
}

func _20200222183441_addalarmingDownSql() (*asset, error) {
	bytes, err := _20200222183441_addalarmingDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200222183441_addAlarming.down.sql", size: 56, mode: os.FileMode(0644), modTime: time.Unix(1582386019, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x27, 0x7e, 0x39, 0x65, 0xf6, 0xb3, 0xa6, 0x59, 0x41, 0x26, 0x4d, 0x86, 0x36, 0xd3, 0x7d, 0x5e, 0x20, 0xa4, 0xa8, 0x74, 0x26, 0x30, 0x24, 0x5, 0x69, 0x17, 0xca, 0xb, 0x94, 0xce, 0xf7}}
	return a, nil
}

var __20200222183441_addalarmingUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x29\x4a\x4c\xce\xce\xcc\x4b\xd7\x2b\x49\xcd\x49\xcd\x4d\x2d\x29\xaa\xe4\x52\x50\x50\x50\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcc\x49\x2c\xca\xcd\xcc\x4b\x57\x08\xf5\xcc\x2b\xb1\x50\x70\x74\x03\x69\x2e\x2e\x49\x2c\x29\x2d\xb6\x06\x04\x00\x00\xff\xff\x60\x5d\xb9\x7a\x4a\x00\x00\x00")

func _20200222183441_addalarmingUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200222183441_addalarmingUpSql,
		"20200222183441_addAlarming.up.sql",
	)
}

func _20200222183441_addalarmingUpSql() (*asset, error) {
	bytes, err := _20200222183441_addalarmingUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200222183441_addAlarming.up.sql", size: 74, mode: os.FileMode(0644), modTime: time.Unix(1582386004, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0x8f, 0x46, 0x1e, 0x56, 0x79, 0x2f, 0xc8, 0xe4, 0x58, 0x5a, 0x7b, 0xa4, 0xe5, 0x78, 0x33, 0x11, 0xa3, 0x56, 0x81, 0x50, 0xa3, 0x9d, 0x3b, 0xe2, 0x28, 0xf5, 0xbd, 0x62, 0x94, 0xb2, 0xb5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20200222183434_initial.down.sql":     _20200222183434_initialDownSql,
	"20200222183434_initial.up.sql":       _20200222183434_initialUpSql,
	"20200222183441_addAlarming.down.sql": _20200222183441_addalarmingDownSql,
	"20200222183441_addAlarming.up.sql":   _20200222183441_addalarmingUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"20200222183434_initial.down.sql":     &bintree{_20200222183434_initialDownSql, map[string]*bintree{}},
	"20200222183434_initial.up.sql":       &bintree{_20200222183434_initialUpSql, map[string]*bintree{}},
	"20200222183441_addAlarming.down.sql": &bintree{_20200222183441_addalarmingDownSql, map[string]*bintree{}},
	"20200222183441_addAlarming.up.sql":   &bintree{_20200222183441_addalarmingUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
