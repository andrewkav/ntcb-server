// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// IntegrationGetDeviceHandlerFunc turns a function with the right signature into a integration get device handler
type IntegrationGetDeviceHandlerFunc func(IntegrationGetDeviceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IntegrationGetDeviceHandlerFunc) Handle(params IntegrationGetDeviceParams) middleware.Responder {
	return fn(params)
}

// IntegrationGetDeviceHandler interface for that can handle valid integration get device params
type IntegrationGetDeviceHandler interface {
	Handle(IntegrationGetDeviceParams) middleware.Responder
}

// NewIntegrationGetDevice creates a new http.Handler for the integration get device operation
func NewIntegrationGetDevice(ctx *middleware.Context, handler IntegrationGetDeviceHandler) *IntegrationGetDevice {
	return &IntegrationGetDevice{Context: ctx, Handler: handler}
}

/*IntegrationGetDevice swagger:route GET /api/v1/integrations/devices/{deviceID} integrationGetDevice

IntegrationGetDevice integration get device API

*/
type IntegrationGetDevice struct {
	Context *middleware.Context
	Handler IntegrationGetDeviceHandler
}

func (o *IntegrationGetDevice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIntegrationGetDeviceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
