// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Device device
// swagger:model Device
type Device struct {

	// ID
	ID string `json:"ID,omitempty"`

	// fuel level liters
	FuelLevelLiters float64 `json:"fuelLevelLiters,omitempty"`

	// ignition on
	IgnitionOn bool `json:"ignitionOn,omitempty"`

	// lat
	Lat float64 `json:"lat,omitempty"`

	// lon
	Lon float64 `json:"lon,omitempty"`

	// odometer
	Odometer float64 `json:"odometer,omitempty"`

	// status
	// Enum: [online offline]
	Status string `json:"status,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["online","offline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceTypeStatusPropEnum = append(deviceTypeStatusPropEnum, v)
	}
}

const (

	// DeviceStatusOnline captures enum value "online"
	DeviceStatusOnline string = "online"

	// DeviceStatusOffline captures enum value "offline"
	DeviceStatusOffline string = "offline"
)

// prop value enum
func (m *Device) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Device) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
